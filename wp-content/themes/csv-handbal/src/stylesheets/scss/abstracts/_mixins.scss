@mixin autosize-in-container{
  width: auto;
  height: auto;
  max-width: 100%;
  max-height: 100%;
}

@mixin vertical-align {
  	position: relative;
  	top: 50%;
	 transform: translateY(-50%);
}

@mixin horizontal-align {
  	position: relative;
  	left: 50%;
    transform: translateX(-50%);
}

@mixin align-both{
  	position: relative;
  	left: 50%;
  	top: 50%;
 	transform: translate(-50%, -50%);
}

@mixin parent-vertical-align{
  	transform-style: preserve-3d;
}

.intrinsic-container {
  position: relative;
  height: 0;
  overflow: hidden;
}
 
.intrinsic-container iframe {
  position: absolute;
  top:0;
  left: 0;
  width: 100%;
  height: 100%;
}

/**
 * Ratios
 * Returns the ratio for specified dimensions.
 */
@function ratio($width, $height) {
  @return percentage( $height / $width);
}


@mixin generateRatios($width, $height, $prefix: "ratio-") {
  $class-name: $prefix + $width + "x" + $height;

  .#{$class-name} {
    padding-bottom: ratio($width, $height);
  }
  // Output example: .ratio-16x9 {}
}

//@include generateRatios(16,9); // 16x9
//@include generateRatios(4,3);  // 4x3
//@include generateRatios(640,450);

//** sgl custom functions (personal additions to the sassy grids framework) **//

@mixin sgl-element($font-size: $sgl-base-font-size, $unit: $sgl-base-unit, $lines: 1) {
    
    $line-height: (round(($font-size * $sgl-base-line-height) ) ) * $lines;

    @if ($unit == "px" or $unit == "pxrem") {
        font-size: $font-size * 1px;
        line-height: $line-height * 1px;
    }

    @if ($unit == "rem" or $unit == "pxrem") {
        font-size: sgl-rem-calc($font-size);
        line-height: sgl-rem-calc($line-height);
    }

    @if ($unit == "em") {
        font-size: sgl-decimal-ceil(sgl-em-calc($font-size, $SGL_DEFAULT_FONT_SIZE), 5);
        line-height: sgl-decimal-ceil(sgl-em-calc($line-height, $font-size), 5);
    }
}

@mixin sgl-height($font-size: $sgl-base-font-size, $unit: $sgl-base-unit, $lines: 1) {
    
    $line-height: (round(($font-size * $sgl-base-line-height) ) ) * $lines;

    @if ($unit == "px" or $unit == "pxrem") {
        
        height: $line-height * 1px;
    }

    @if ($unit == "rem" or $unit == "pxrem") {
        
        height: sgl-rem-calc($line-height);
    }

    @if ($unit == "em") {
        
        height: sgl-decimal-ceil(sgl-em-calc($line-height, $font-size), 5);
    }
}

@mixin sgl-min-height($lines: 1, $font-size: $sgl-base-font-size, $unit: $sgl-base-unit) {
    
    $line-height: (round(($font-size * $sgl-base-line-height) ) ) * $lines;

    @if ($unit == "px" or $unit == "pxrem") {
        
        min-height: $line-height * 1px;
    }

    @if ($unit == "rem" or $unit == "pxrem") {
        
        min-height: sgl-rem-calc($line-height);
    }

    @if ($unit == "em") {
        
        min-height: sgl-decimal-ceil(sgl-em-calc($line-height, $font-size), 5);
    }
}

@mixin sgl-margins-multiple($lines: 1, $unit: $sgl-base-unit, $base-value: $sgl-base-font-size) {
    
    $margin: round(($base-value * $sgl-base-line-height)* $lines);
    $margin-bottom: $margin ;
    $margin-top: 0;

    @if ($sgl-debug-mode == true) {
        @include sgl-show-margins($margin-bottom, $margin-top, $base-value);
    }

    @if ($unit == "px" or $unit == "pxrem") {
        margin-bottom: $margin * 1px;
        margin-top: $margin-top;
    }

    @if ($unit == "rem" or $unit == "pxrem") {
        margin-bottom: sgl-rem-calc($margin);
        margin-top: $margin-top;
    }

    @if ($unit == "em") {
        margin-bottom: sgl-decimal-ceil(sgl-em-calc($margin, $base-value), 5);
        margin-top: $margin-top;
    }
}

@mixin sgl-padding-multiple($lines:1, $unit: $sgl-base-unit, $base-value: $sgl-base-font-size ){
    $padding: round(($base-value * $sgl-base-line-height)* $lines);
    $padding-top: $padding;
    $padding-bottom: 0;

    

    @if ($unit == "px" or $unit == "pxrem") {
        padding-bottom: $padding-bottom;
        padding-top: $padding * 1px;
    }

    @if ($unit == "rem" or $unit == "pxrem") {
        padding-bottom: $padding-bottom;
        padding-top: sgl-rem-calc($padding);
    }

    @if ($unit == "em") {
        padding-bottom: $padding-bottom;
        padding-top: sgl-decimal-ceil(sgl-em-calc($padding, $base-value), 5);
    }
}

